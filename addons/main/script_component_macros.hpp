#define CLASS_JUKEBOX_OBJECT RGVAR(object)
#define CLASS_JUKEBOX_ITEM RGVAR(item)
#define CLASS_JUKEBOX_CATEGORIES RGVAR(categories)
#define CLASS_SPEAKER_PROXY RGVAR(speaker_proxy)

#define VAR_SPEAKER_PROXY RGVAR(speaker)
#define VAR_SOUND_SOURCE RGVAR(soundSource)
#define VAR_SOUND_DISTANCE RGVAR(soundDistance)
#define VAR_NOTIFICATION_DISTANCE RGVAR(notificationDistance)
#define VAR_LOCAL_MUTE RGVAR(localMute)
#define VAR_ENABLE_BASEGAME_MUSIC RGVAR(enableBaseGameMusic)
#define VAR_IS_INSTALLED RGVAR(isInstalled)
#define VAR_IS_REPEATING RGVAR(isRepeating)
#define VAR_IS_PLAYING RGVAR(isPlaying)
#define VAR_QUEUE_LIST RGVAR(queueList)
#define VAR_TRACK_CATEGORIES RGVAR(trackCategories)
#define VAR_TRACKS_MAP RGVAR(tracksMap)



#define QCLASS_JUKEBOX_OBJECT QUOTE(CLASS_JUKEBOX_OBJECT)
#define QCLASS_JUKEBOX_ITEM QUOTE(CLASS_JUKEBOX_ITEM)
#define QCLASS_JUKEBOX_CATEGORIES QUOTE(CLASS_JUKEBOX_CATEGORIES)
#define QCLASS_SPEAKER_PROXY QUOTE(CLASS_SPEAKER_PROXY)

#define QVAR_SPEAKER_PROXY QUOTE(VAR_SPEAKER_PROXY)
#define QVAR_SOUND_SOURCE QUOTE(VAR_SOUND_SOURCE)
#define QVAR_SOUND_DISTANCE QUOTE(VAR_SOUND_DISTANCE)
#define QVAR_NOTIFICATION_DISTANCE QUOTE(VAR_NOTIFICATION_DISTANCE)
#define QVAR_LOCAL_MUTE QUOTE(VAR_LOCAL_MUTE)
#define QVAR_ENABLE_BASEGAME_MUSIC QUOTE(VAR_ENABLE_BASEGAME_MUSIC)
#define QVAR_IS_INSTALLED QUOTE(VAR_IS_INSTALLED)
#define QVAR_IS_REPEATING QUOTE(VAR_IS_REPEATING)
#define QVAR_IS_PLAYING QUOTE(VAR_IS_PLAYING)
#define QVAR_QUEUE_LIST QUOTE(VAR_QUEUE_LIST)
#define QVAR_TRACK_CATEGORIES QUOTE(VAR_TRACK_CATEGORIES)
#define QVAR_TRACKS_MAP QUOTE(VAR_TRACKS_MAP)



#define GET_CACHED(var1,var2) ([missionNamespace,QUOTE(var1),var2] call EFUNC(main,getCached))
#define RESET_CACHED(var1) SETVARLOCAL(missionNamespace,QUOTE(var1),nil)
#define GET_SPEAKER_PROXY(var1) GETVAR(var1,VAR_SPEAKER_PROXY,objNull)
#define SET_SPEAKER_PROXY(var1,var2) SETVARLOCAL(var1,VAR_SPEAKER_PROXY,var2)
#define GET_SOUND_SOURCE(var1) GETVAR(var1,VAR_SOUND_SOURCE,objNull)
#define SET_SOUND_SOURCE(var1,var2) SETVARLOCAL(var1,VAR_SOUND_SOURCE,var2)
#define IS_INSTALLED(var1) GETVAR(var1,VAR_IS_INSTALLED,false)
#define IS_REPEATING(var1) GETVAR(var1,VAR_IS_REPEATING,false)
#define IS_PLAYING(var1) GETVAR(var1,VAR_IS_PLAYING,false)
#define SET_INSTALLED(var1,var2) SETVARGLOBAL(var1,VAR_IS_INSTALLED,var2)
#define SET_REPEATING(var1,var2) SETVARGLOBAL(var1,VAR_IS_REPEATING,var2)
#define SET_PLAYING(var1,var2) SETVARGLOBAL(var1,VAR_IS_PLAYING,var2)
#define GET_QUEUE_LIST(var1) GETVAR(var1,VAR_QUEUE_LIST,[])
#define GET_QUEUE_LIST_IS_EMPTY(var1) (GET_QUEUE_LIST(var1) isEqualTo [])
#define GET_QUEUE_LIST_IS_NOT_EMPTY(var1) (GET_QUEUE_LIST(var1) isNotEqualTo [])
#define SET_QUEUE_LIST(var1,var2) SETVARGLOBAL(var1,VAR_QUEUE_LIST,var2)
#define HAS_JUKEBOX_ITEM(var1) CALL2(ace_common_fnc_hasItem,var1,'CLASS_JUKEBOX_ITEM')
#define HAS_SPEAKER(var1) CALL1(EFUNC(main,hasSpeaker),var1)
#define GET_SPEAKER(var1) CALL1(EFUNC(main,getSpeaker),var1)
#define GET_TRACK_CATEGORIES GET_CACHED(VAR_TRACK_CATEGORIES,EFUNC(main,getTrackCategories))
#define RESET_TRACK_CATEGORIES RESET_CACHED(VAR_TRACK_CATEGORIES)
#define GET_TRACKS_MAP GET_CACHED(VAR_TRACKS_MAP,EFUNC(main,getTracksMap))
#define RESET_TRACKS_MAP RESET_CACHED(VAR_TRACKS_MAP)
#define SPEAKER_PROXY_OFFSET_MUTED [0, 0, -1e20]
#define SPEAKER_PROXY_OFFSET_UNMUTED [0, 0, 0]
#define SPEAKER_PROXY_OFFSET [SPEAKER_PROXY_OFFSET_UNMUTED, SPEAKER_PROXY_OFFSET_MUTED] select VAR_LOCAL_MUTE

#define EMIT_SERVER_EVENT_ARGS0(FUNCTION) [CBA_fnc_serverEvent, ['FUNCTION', []]] call CBA_fnc_execNextFrame
#define EMIT_SERVER_EVENT_ARGS1(FUNCTION,var1) [CBA_fnc_serverEvent, ['FUNCTION', [var1]]] call CBA_fnc_execNextFrame
#define EMIT_SERVER_EVENT_ARGS2(FUNCTION,var1,var2) [CBA_fnc_serverEvent, ['FUNCTION', [var1, var2]]] call CBA_fnc_execNextFrame
#define EMIT_SERVER_EVENT_ARGS3(FUNCTION,var1,var2,var3) [CBA_fnc_serverEvent, ['FUNCTION', [var1, var2, var3]]] call CBA_fnc_execNextFrame
#define EMIT_SERVER_EVENT_ARGS4(FUNCTION,var1,var2,var3,var4) [CBA_fnc_serverEvent, ['FUNCTION', [var1, var2, var3, var4]]] call CBA_fnc_execNextFrame
